#!/usr/bin/ruby


file = ARGV[1]
opt = ARGV[0]
rootdir=""

LIST_FUNC=0
SHOWTODO=1


def search(rdir,dir, d,filename)
   nodet=""
   rdir=rdir.strip
   dir.split('/').each do |node|
      nodet+=node+"/"
      root=(nodet+d).gsub("//","/").strip
      if root.gsub("/","") == (rdir+d).strip.gsub("/","")
          next
      end
      targetfile= "#{root}/#{filename}".gsub("//","/")
      if File.exists? targetfile
         puts "[FOUND] #{targetfile}"
         return targetfile
      end
   end
   puts "[NOT FOUND]"
   abort
end



# delete equal sign and returnthe string required
def deleaturEqualSign(x)
 tag=x.split(':')[1]
 if  (tag != nil) && (tag.include? "=")
     tag = tag.split('=')[0] 
     print tag.gsub("[","")+","
 end
end


def printMethodHead(linesplit)
 print "[method] "+linesplit[0].gsub("{","").gsub("=","").gsub("def","").strip+" ("
end
def printMethodDetail(linesplit)
  if linesplit[1] != nil
       types= linesplit[1].split(',')
       types.each do |x|
          deleaturEqualSign(x)
       end
  end
end

def isFuncDefinition(line)
  return ((line.strip.start_with? "def") && (!line.include? " new ") && (line.include? "{") && (line.include? "=")) ||( (line.include? "should")&&(line.include? "{" )&&(line.include? "\""))
end


def isValidComment(cmd, lsd,cmtg)
 return (cmd == SHOWTODO && (lsd.start_with? cmtg)) 
end

def showFileName(cmd,file)
 if cmd == LIST_FUNC
    puts "=============================================="
    puts "[#{file}]" 
    puts "=============================================="
 end
end

def PrintDir(dir,cmdo)
  Dir.foreach(dir) do |item|	
    path=dir+"/"+item
    if (item.strip == ".") || (item.strip == "..")
      next
    end 
    if (File.directory?(path)) 
      puts
      puts "DIRECTORY ===> /#{item}"
      puts
      PrintDir(path,cmdo)  
    end

    puts "********************************************************"
    puts "[File] "+item 
    puts "********************************************************"
    if item.end_with? ".scala"
      readSourceFile(path,SHOWTODO,cmdo)
      puts
    end
  end 
end  



def matches(line,method,key) 
 return (line.strip.start_with? key) && (line.gsub(key,"").strip.start_with? method )
end


def find_self(line,method,file)
 if matches(line,method,"def")
	 begin	
            # lt ... 'line tokens'
            lt=line.gsub("def","").strip.split('(')
            methodname=lt[0]
            print methodname  +"("
            lt[1].split(',').each do |x|
              if x.include? "="
                x = x.split('=')[0]
    	      end 
   	      x = x.split(':')[1]    
              print "#{x},"
            end
            print(")")    
            puts 
            puts "[ #{file} ]"
            puts    
            return 0
         rescue Exception => e

         end   
      end
      return 1
end

def refImportPath(f,tdir,method,rootdir)
      puts "#{f} : #{tdir} :#{method}"
      res = 1
      if f.strip.include? ","
        f.strip.gsub("{","").gsub("}","").split(',').each do |s|
          # name.space.{File1,File2} <==== this case! Recursively Iterate Files through 
          refImportPath(s.strip,tdir,method,rootdir)
        end 
      elsif
        path=tdir+"/"+f.strip
        if path.end_with?('_') 
           path= path.gsub("_","")
           puts "[PATH] #{path}"
	   puts "#{f.strip}"
           if File.directory?(path)
             Directory.foreach(path) do |x|
                refImportPath(File.basename(path),tdir,method,rootdir)
             end
           end
           # all the file in the directory gotta be referred to ...
        elsif File.directory? (path)
           # just ignore it...           
        else
           tfile=(tdir+"/"+f.strip+".scala").strip
           puts "[looking for..] "+tfile
           tfile= search(rootdir,tfile,tdir,f.strip+".scala")  
           if tfile != ""  
             puts "[test] "+tfile     
             File.open(tfile).each_line do |line|
               res =  find_self(line,method,tfile)
               if res == 0
                  return res       
               end  
             end  
           end
           # if File, just do your f**in job and Search!
        end
      end
      return 1
end


def readSourceFile(file,cmd,cmtg)
    #dd if File.directory?(file)
    showFileName(cmd,file)

    # this vflag determines whether to show the next line or not
    lines=File.open(file,"r")
    numero=-1
    linecount=1
    lines.each_line do |line|
      lsd = line.strip
      if numero > -1
          puts " % "+line.strip+" [#{linecount}]"
          numero -= 1
          next
      end
    
      if isValidComment(cmd, lsd,cmtg)
          #puts line.strip.gsub("//"," ")
          puts line.strip.gsub("//"," ")+" [#{linecount}]"
          if line.include? "$"
            if line.include? "$("
               index=line.split('$(')[1].split(')')[0]
               numero=index.to_i-1
            else
               numero=0
            end
          end
       # linecount=linecount+1
      end
      if isFuncDefinition(line)
        puts "-------------------------------------"
        linesplit=line.split('(')
        printMethodHead(linesplit)
        printMethodDetail(linesplit)
        print ")"
        puts
        puts "------------------------------------------" 
      end
      linecount=linecount+1
    end
end


case opt
when "-f"
  file= ARGV[1]
  method= ARGV[3]
  rootdir=ARGV[2]
  dir=File.dirname(file)
  # first, look in its own class for the method definition... 
  #description=""
  imports = Array.new

  File.open(file).each_line do |line|
     #if line.include? "//f:"
     #   description=line.gsub("//f:","").strip
     #end
     if line.strip.start_with? "import "
         imports.push(line)
     end
     res= find_self(line,method,file)
     if res == 0
       abort
     end
  end   
  
   
  imports.each do |f|
    res = refImportPath(f.strip.gsub("import","").gsub(".","/"),dir,method,rootdir)
    if res == 0
       abort ("done.")
    end
  end 

  puts "word '#{method}' not found ... "  
  puts "File location: #{file} #{method}"
when "-h"
  puts "*** Vim Editor Extension version 1.0 ***"
  puts
  puts "=========================================================="
  puts "HELP:"
  puts
  puts "$ ruby vimhacker [-ra][DIRECTORY][-R (optional:recursive)]	... Console out functions of the source code and all of its comments"       +" represented by //"
  puts
  puts "$ ruby vimhacker [-rq][DIRECTORY][-R(optional)]	... Console out functions of codes and its " + "query(ask) comments, represented by //? "
  puts
  puts "$ ruby vimhacker [-rt][DIRECTORY] [-R(optional)]  ... Console out functions of codes and its"  + "todo comments, represented by //todo "
  puts
  puts "if you want to print out NON_COMMENT areas in a code, you can do it by embedding the" + "following function on the comment line:" + "\n $scrape(n)  ... in n, you put number of line you gotta print out just below the comment line. "   
else

end

if opt.start_with? "-r" 
  dir= file
  cmdo=""
  case opt
      when "-ra"
         cmdo ="//" 
      when "-rq"
         puts "dsfkshflshjk"
         cmdo="//?" 
      when "-rt"
         cmdo="//todo"  
      else
        abort("your action argument '#{opt}' requested does not make sense."+
              "\n\n[-ra]:all comments [-rq]:all queries(ask)  [-rt]: all todos \n\n"     )    
   end
  PrintDir(dir,cmdo)
end

